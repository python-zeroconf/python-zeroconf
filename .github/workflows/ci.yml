name: CI

on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: pre-commit/action@v3.0.1

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "pypy-3.8"
          - "pypy-3.9"
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        extension:
          - "skip_cython"
          - "use_cython"
        exclude:
          - os: macos-latest
            extension: use_cython
          - os: windows-latest
            extension: use_cython
          - os: windows-latest
            python-version: "pypy-3.8"
          - os: windows-latest
            python-version: "pypy-3.9"
          - os: macos-latest
            python-version: "pypy-3.8"
          - os: macos-latest
            python-version: "pypy-3.9"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
          allow-prereleases: true
      - name: Install Dependencies no cython
        if: ${{ matrix.extension == 'skip_cython' }}
        env:
          SKIP_CYTHON: 1
        run: poetry install --only=main,dev
      - name: Install Dependencies with cython
        if: ${{ matrix.extension != 'skip_cython' }}
        env:
          REQUIRE_CYTHON: 1
        run: poetry install --only=main,dev
      - name: Test with Pytest
        run: poetry run pytest --durations=20 --timeout=60 -v --cov=zeroconf --cov-branch --cov-report xml --cov-report html --cov-report term-missing tests
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    needs:
      - test
      - lint
      - commitlint

    runs-on: ubuntu-latest
    environment: release
    concurrency: release
    permissions:
      id-token: write
      contents: write
    outputs:
      released: ${{ steps.release.outputs.released }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}

      # Do a dry run of PSR
      - name: Test release
        uses: python-semantic-release/python-semantic-release@v9.12.0
        if: github.ref_name != 'master'
        with:
          root_options: --noop

      # On main branch: actual PSR + upload to PyPI & GitHub
      - name: Release
        uses: python-semantic-release/python-semantic-release@v9.12.0
        id: release
        if: github.ref_name == 'master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@main
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build_wheels:
    needs: [release]
    if: needs.release.outputs.released == 'true'

    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019, macos-12, macos-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "master"

      # Used to host cibuildwheel
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install python-semantic-release
        run: pipx install python-semantic-release==7.34.6

      - name: Get Release Tag
        id: release_tag
        shell: bash
        run: |
          echo "::set-output name=newest_release_tag::$(semantic-release print-version --current)"

      - uses: actions/checkout@v3
        with:
          ref: "${{ steps.release_tag.outputs.newest_release_tag }}"
          fetch-depth: 0

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        # to supply options, put them in 'env', like:
        env:
          CIBW_SKIP: cp36-* cp37-* pp36-* pp37-* *p38-*_aarch64 cp38-*_arm64 *p39-*_aarch64 *p310-*_aarch64 pp*_aarch64 *musllinux*_aarch64
          CIBW_BEFORE_ALL_LINUX: apt install -y gcc || yum install -y gcc || apk add gcc
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_BUILD_VERBOSITY: 3
          REQUIRE_CYTHON: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment: release

    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

          # To test: repository_url: https://test.pypi.org/legacy/
